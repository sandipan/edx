import matplotlib.pyplot as plt
import IVPlib_rev4 as IVPlib
from IVPlib_rev4 import IVP

class CabinIVP(IVP):
    def evalf(self, u, t):
        """        
        Args:
            u (float list): current temperature of cabin.
            t (float): current time
    
        Returns:
            f (float list): returns du/dt
        """

        m0cc = self.get_p('m0')*self.get_p('cc')
        hA_left  = self.get_p('h_left')  * self.get_p('A_left')
        hA_right = self.get_p('h_right') * self.get_p('A_right')
        hA_back  = self.get_p('h_back')  * self.get_p('A_back')
        hA_front = self.get_p('h_front') * self.get_p('A_front')
        hA_top   = self.get_p('h_top')   * self.get_p('A_top')
        hA_bot   = self.get_p('h_bot')   * self.get_p('A_bot')
        
        u_out    = self.get_p('u_out')
        u_ground = self.get_p('u_ground')
        
        Q_stove  = self.get_p('Q_stove')

        A = -(hA_left + hA_right + hA_back + hA_front + hA_top + hA_bot)/m0cc
        
        Q_out    = (hA_left + hA_right + hA_back + hA_front + hA_top)*u_out(t)
        Q_ground = hA_bot*u_ground(t)

        b = (Q_out + Q_ground + Q_stove(t))/m0cc
        
        f = A*u[0] + b

        return [f]

def u_ground(t):
    """
        Args:
            t (float): current time in seconds
    
        Returns:
            u_ground (float): ground temperature at time t in deg C
    """
    return 0.0

def u_out(t):
    """
        Args:
            t (float): current time in seconds
    
        Returns:
            u_out (float): outside temperature at time t in deg C
    """
    return 0.0

def Q_stove(t):
    """
        Args:
            t (float): current time in seconds
    
        Returns:
            Q_stove (float): heat generated by stove at time t in Watts
    """
    
    tm = t/60. # time in min from secs
    if (tm<60.):
        Qdot = 5.0e3
    elif (tm < 120.):
        Qdot = 5.0e3*(120.-tm)/60.
    else:
        Qdot = 0.
        
    return Qdot


A_bt     = 50. # area of bottom, top (m^2)
A_lrfb   = 25. # area of left, right, front, back (m^2)
h_ground = 0.04 # ground heat transfer coefficient (W/(m^2 C))
h_roof   = 0.4 # roof heat transfer coefficient (W/(m^2 C))
h_ext    = 2.0 # exterior walls heat transfer coefficient (W/(m^2 C))
m0       = 200. # mass of cabin air
cc       = 700.0 # J / (kg C)
        
u0I   = 0.0 # Initial temperature of cabin (C)
tFmin = 300.0 # final time to simulate to (min)
dtmin = 5e-1 # time increment to give solutions at (min)

# Convert times to seconds
tF = tFmin*60
dt = dtmin*60

# Initialize CabinIVP object
p = {}
p['A_left']  = A_lrfb
p['A_right'] = A_lrfb
p['A_front'] = A_lrfb
p['A_back']  = A_lrfb
p['A_bot']   = A_bt
p['A_top']   = A_bt

p['h_left']  = h_ext
p['h_right'] = h_ext
p['h_front'] = h_ext
p['h_back']  = h_ext
p['h_bot']   = h_ground
p['h_top']   = h_roof

p['m0']      = m0
p['cc']      = cc

p['u_out']    = u_out
p['u_ground'] = u_ground
p['Q_stove']  = Q_stove

cabinIVP = CabinIVP([u0I], 0.0, tF, p)

# Solve cabin IVP
t, v = IVPlib.solve(cabinIVP, dt, IVPlib.step_FE)

# Extract cabin temperature from v and scale time to minutes
u  = []
for n in range(len(t)):
    t[n] = t[n]/60.0 # convert to minutes
    u.append(v[n][0])

# Plot   
fig, ax = plt.subplots()
ax.scatter(t,u,marker='o',label='cabin')
ax.set_xlabel('t (min)')
ax.set_ylabel('temperature (C)')
ax.grid(True)
ax.legend()
